<templateSet group="user">
  <template name="jtest" value="@org.junit.Test&#10;public void $NAME$() throws Exception {&#10;  $END$&#10;}" description="test" toReformat="false" toShortenFQNames="true" useStaticImport="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="test" value="@kotlin.test.Test&#10;fun $NAME$() {&#10;  $END$&#10;}" description="Kotlin test" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="app" value="val appContext = react.useContext(baaahs.app.ui.appContext)" description="appContext" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="log" value="private val logger = baaahs.util.Logger&lt;$CLASS$&gt;()" description="Create Logger" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="kotlinClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="li" value="logger.info { &quot;$END$&quot; }" description="logger.info" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ld" value="logger.debug { &quot;$END$&quot; }" description="logger.debug" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="lw" value="logger.warn { &quot;$END$&quot; }" description="warn" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="le" value="logger.error(e) { &quot;$END$&quot; }" description="error" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
  <template name="spec" value="import baaahs.describe&#10;&#10;@Suppress(&quot;unused&quot;)&#10;object $CLASS$Spec : org.spekframework.spek2.Spek({&#10;    describe&lt;$CLASS$&gt; {&#10;        val $SUBJECT$ by value { $CLASS$($END$) }&#10;        &#10;        it(&quot;should â€¦&quot;) {&#10;        }&#10;    }&#10;})" description="Spek spec" toReformat="true" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SUBJECT" expression="snakeCase(CLASS)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="val" value="val $NAME$ by value { $VALUE$ }" description="&quot;by value&quot; in spec" toReformat="true" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="kotlinSuggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>